var _user$project$View$getNumberOfEachPlate = F3(
	function (remainingPlateWeight, index, accumulatedArray) {
		getNumberOfEachPlate:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(remainingPlateWeight, 0)) {
				return accumulatedArray;
			} else {
				var plateWeights = {
					ctor: '::',
					_0: 90,
					_1: {
						ctor: '::',
						_0: 70,
						_1: {
							ctor: '::',
							_0: 50,
							_1: {
								ctor: '::',
								_0: 20,
								_1: {
									ctor: '::',
									_0: 10,
									_1: {
										ctor: '::',
										_0: 5,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				};
				var currentPlateWeight = A2(
					_elm_lang$core$Maybe$withDefault,
					0,
					A2(_elm_community$list_extra$List_Extra$getAt, index, plateWeights));
				var _v0 = A2(_elm_lang$core$Basics_ops['%'], remainingPlateWeight, currentPlateWeight),
					_v1 = index + 1,
					_v2 = A2(
					_elm_lang$core$List$append,
					accumulatedArray,
					{
						ctor: '::',
						_0: (remainingPlateWeight / currentPlateWeight) | 0,
						_1: {ctor: '[]'}
					});
				remainingPlateWeight = _v0;
				index = _v1;
				accumulatedArray = _v2;
				continue getNumberOfEachPlate;
			}
		}
	});
var _user$project$View$createResults = F4(
	function (model, plateOutputs, index, accumulatedList) {
		createResults:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(plateOutputs),
				0)) {
				return accumulatedList;
			} else {
				var plateAmount = A2(
					_elm_lang$core$Maybe$withDefault,
					'blah',
					A2(_elm_community$list_extra$List_Extra$getAt, index, model.typesOfPlates));
				var plateInfo = A2(
					_elm_lang$core$Maybe$withDefault,
					'blah',
					_elm_lang$core$List$head(plateOutputs));
				if (!_elm_lang$core$Native_Utils.eq(plateInfo, '')) {
					var html = {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$String$concat(
										{
											ctor: '::',
											_0: plateAmount,
											_1: {
												ctor: '::',
												_0: '\'s -- ',
												_1: {
													ctor: '::',
													_0: plateInfo,
													_1: {ctor: '[]'}
												}
											}
										})),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					};
					var _v3 = model,
						_v4 = A2(_elm_lang$core$List$drop, 1, plateOutputs),
						_v5 = index + 1,
						_v6 = A2(_elm_lang$core$List$append, accumulatedList, html);
					model = _v3;
					plateOutputs = _v4;
					index = _v5;
					accumulatedList = _v6;
					continue createResults;
				} else {
					var _v7 = model,
						_v8 = A2(_elm_lang$core$List$drop, 1, plateOutputs),
						_v9 = index + 1,
						_v10 = accumulatedList;
					model = _v7;
					plateOutputs = _v8;
					index = _v9;
					accumulatedList = _v10;
					continue createResults;
				}
			}
		}
	});
var _user$project$View$renderPlateInfos = F2(
	function (model, plateOutputs) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('result'),
				_1: {ctor: '[]'}
			},
			A4(
				_user$project$View$createResults,
				model,
				plateOutputs,
				0,
				{ctor: '[]'}));
	});
var _user$project$View$convertNumPlatesToString = function (number) {
	return (_elm_lang$core$Native_Utils.cmp(number, 0) > 0) ? _elm_lang$core$String$concat(
		{
			ctor: '::',
			_0: _elm_lang$core$Basics$toString(number),
			_1: {
				ctor: '::',
				_0: ' on each side',
				_1: {ctor: '[]'}
			}
		}) : '';
};
var _user$project$View$getPlateOutputs = function (numberOfEachPlate) {
	return A2(_elm_lang$core$List$map, _user$project$View$convertNumPlatesToString, numberOfEachPlate);
};
var _user$project$View$calculatedResult = function (model) {
	return (model.shouldShowResults && _elm_lang$core$Native_Utils.eq(model.error, '')) ? A2(
		_user$project$View$renderPlateInfos,
		model,
		_user$project$View$getPlateOutputs(
			A3(
				_user$project$View$getNumberOfEachPlate,
				model.totalPlateWeight,
				0,
				{ctor: '[]'}))) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('error'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(model.error),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$View$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Plate Calculator'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Enter the total weight you are trying to lift'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Msgs$EnteredWeight),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href('#'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$id('calculate'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('btn'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_user$project$Msgs$OnCalculateClick),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Calculate'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$View$calculatedResult(model),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
